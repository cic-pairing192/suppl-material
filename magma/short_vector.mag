k := 16;
u := 2^78-2^76-2^28+2^14+2^7+1;
r := (u^8 + 48*u^4 + 625) div 61250;
t := (2*u^5 + 41 * u + 35) div 35;
p := (u^10 + 2*u^9 + 5*u^8 + 48*u^6 + 152*u^5 + 240*u^4 + 625*u^2 + 2398*u + 3125) div 980;
h := (p + 1 - t) div r;

beta := 2;

Fp := GF(p);
Fp2<j> := ExtensionField<Fp, j | j^2 + beta>;
Fp4<v> := ExtensionField<Fp2, v | v^2 - j>;
Fp8<t> := ExtensionField<Fp4, t | t^2 - v>;
Fp16<w> := ExtensionField<Fp8, w | w^2 - t>;

a := 1;
b := 0;
A := v;
KSSCurve:=EllipticCurve([Fp|a,b]);
KSSTwist:=EllipticCurve([Fp4|A,b]);
print Order(KSSCurve) eq h*r;

h2 := Order(KSSTwist) div r;

ShortVectors := function(p, t, r, k, h2, v)
u:=EulerPhi(k);
B:=RMatrixSpace(Integers(), u,u)!0;
B[1][1]:=r;
for i:=2 to u do
 B[i][1]:=-p^(i-1);B[i][i]:=1;
end for;
L:=LatticeWithBasis(B);
S:=ShortestVectors(L);
R<x>:=PolynomialRing(Integers());
for i:=1 to #S do
 C:=S[i];
 b:=R!Eltseq(C);
 h2d:=Resultant(b, x^2-t*x+p) div r;
 if GCD(h2,h2d) eq 1 then
  return C;
 end if;
end for;
min:=Norm(ShortestVectors(L));max:=v*min;
V:=ShortVectorsProcess(L, min, max);
repeat
 C:=NextVector(V);
 if Norm(C) eq 0 then
  return "NULL";
 end if;
 b:= R!Eltseq(C);
 h2d:=Resultant(b, x^2-t*x+p) div r;
until GCD(h2,h2d) eq 1;
return C;
end function;

ShortVectors(p, t, r, k, h2, 1);
